#!/usr/bin/env bash

SOURCE_DIR="`pwd`"
BUILD_DIR="`pwd`/cppbuild/Release"
EXTRA_CMAKE_ARGS=""
COVERAGE_BUILD=0

ncpus=1
case "`uname`" in
  Darwin* )
    ncpus=`sysctl -n hw.ncpu`
    ;;
  Linux*)
    ncpus=$(lscpu -p | egrep -v '^#' | wc -l)
    ;;
esac

for option in "$@"
do
  case ${option} in
    --c-warnings-as-errors)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DC_WARNINGS_AS_ERRORS=ON"
      echo "Enabling warnings as errors for c"
      shift
      ;;
    --cxx-warnings-as-errors)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DCXX_WARNINGS_AS_ERRORS=ON"
      echo "Enabling warnings as errors for c++"
      shift
      ;;
    -a|--build-archive-api)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DBUILD_AERON_ARCHIVE_API=ON"
      shift
      ;;
    --slow-system-tests)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DAERON_SLOW_SYSTEM_TESTS=ON -DAERON_SYSTEM_TESTS=OFF"
      shift
      ;;
    -d|--debug-build)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug"
      shift
      ;;
    -b|--build-aeron-driver)
      echo "Enabling building of aeron driver is now the default"
      shift
      ;;
    --no-parallel)
      ncpus=1
      shift
      ;;
    --no-system-tests)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DAERON_SYSTEM_TESTS=OFF"
      echo "Disabling system tests"
      shift
      ;;
    --sanitise-build)
      EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DSANITISE_BUILD=ON"
      echo "Enabling sanitise build"
      shift
      ;;
    --coverage-build)
      if (hash lcov 2>/dev/null && hash genhtml 2>/dev/null); then
        EXTRA_CMAKE_ARGS="$EXTRA_CMAKE_ARGS -DCOVERAGE_BUILD=ON"
        echo "Enabling coverage build"
        COVERAGE_BUILD=1
      else
        echo "lcov/genhtml not found - you need these installed to run the coverage build"
        exit
      fi
      shift
      ;;
    -h|--help)
      echo "$0 [--c-warnings-as-errors] [--cxx-warnings-as-errors] [--debug-build] [--build-aeron-driver] [--sanitise-build] [--coverage-build] [--no-parallel]"
      exit
      ;;
    *)
      echo "Unknown option $option"
      echo "Use --help for help"
      exit
      ;;
  esac
done

echo "Will make with \"-j $ncpus\"."

if [[ -d "$BUILD_DIR" ]] ; then
  echo "Build directory ($BUILD_DIR) exists, removing."
  rm -rf ${BUILD_DIR}
fi

mkdir -p ${BUILD_DIR}

if [[ "$COVERAGE_BUILD" -eq 1 ]] ; then
  cd ${BUILD_DIR}
  cmake -G "Unix Makefiles" ${EXTRA_CMAKE_ARGS} ${SOURCE_DIR} && make clean && make -j "$ncpus" all && ctest -C Release -j "$ncpus"
  rm -rf coverage
  mkdir -p coverage
  lcov --directory . --base-directory . --capture -o coverage/cov.info
  lcov -o coverage/cov.stripped.info --remove coverage/cov.info "/usr/include/*" "*/googletest/*" "*/test/cpp/*" "*/googlemock/*"
  genhtml coverage/cov.stripped.info --demangle-cpp -o coverage
else
  (cd ${BUILD_DIR} && cmake -G "CodeBlocks - Unix Makefiles" ${EXTRA_CMAKE_ARGS} ${SOURCE_DIR} && make clean && make -j "$ncpus" all && ctest -C Release --output-on-failure)
fi
